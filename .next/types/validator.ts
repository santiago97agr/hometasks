// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
}


// Validate ../../app/(auth)/login/page.tsx
{
  const handler = {} as typeof import("../../app/(auth)/login/page.js")
  handler satisfies AppPageConfig<"/login">
}

// Validate ../../app/(auth)/register/page.tsx
{
  const handler = {} as typeof import("../../app/(auth)/register/page.js")
  handler satisfies AppPageConfig<"/register">
}

// Validate ../../app/dashboard/areas/[id]/edit/page.tsx
{
  const handler = {} as typeof import("../../app/dashboard/areas/[id]/edit/page.js")
  handler satisfies AppPageConfig<"/dashboard/areas/[id]/edit">
}

// Validate ../../app/dashboard/areas/new/page.tsx
{
  const handler = {} as typeof import("../../app/dashboard/areas/new/page.js")
  handler satisfies AppPageConfig<"/dashboard/areas/new">
}

// Validate ../../app/dashboard/areas/page.tsx
{
  const handler = {} as typeof import("../../app/dashboard/areas/page.js")
  handler satisfies AppPageConfig<"/dashboard/areas">
}

// Validate ../../app/dashboard/page.tsx
{
  const handler = {} as typeof import("../../app/dashboard/page.js")
  handler satisfies AppPageConfig<"/dashboard">
}

// Validate ../../app/dashboard/tasks/[id]/edit/page.tsx
{
  const handler = {} as typeof import("../../app/dashboard/tasks/[id]/edit/page.js")
  handler satisfies AppPageConfig<"/dashboard/tasks/[id]/edit">
}

// Validate ../../app/dashboard/tasks/new/page.tsx
{
  const handler = {} as typeof import("../../app/dashboard/tasks/new/page.js")
  handler satisfies AppPageConfig<"/dashboard/tasks/new">
}

// Validate ../../app/dashboard/tasks/page.tsx
{
  const handler = {} as typeof import("../../app/dashboard/tasks/page.js")
  handler satisfies AppPageConfig<"/dashboard/tasks">
}

// Validate ../../app/page.tsx
{
  const handler = {} as typeof import("../../app/page.js")
  handler satisfies AppPageConfig<"/">
}

// Validate ../../app/api/areas/[id]/route.ts
{
  const handler = {} as typeof import("../../app/api/areas/[id]/route.js")
  handler satisfies RouteHandlerConfig<"/api/areas/[id]">
}

// Validate ../../app/api/areas/route.ts
{
  const handler = {} as typeof import("../../app/api/areas/route.js")
  handler satisfies RouteHandlerConfig<"/api/areas">
}

// Validate ../../app/api/auth/[...nextauth]/route.ts
{
  const handler = {} as typeof import("../../app/api/auth/[...nextauth]/route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/[...nextauth]">
}

// Validate ../../app/api/auth/register/route.ts
{
  const handler = {} as typeof import("../../app/api/auth/register/route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/register">
}

// Validate ../../app/api/dashboard/route.ts
{
  const handler = {} as typeof import("../../app/api/dashboard/route.js")
  handler satisfies RouteHandlerConfig<"/api/dashboard">
}

// Validate ../../app/api/tasks/[id]/complete/route.ts
{
  const handler = {} as typeof import("../../app/api/tasks/[id]/complete/route.js")
  handler satisfies RouteHandlerConfig<"/api/tasks/[id]/complete">
}

// Validate ../../app/api/tasks/[id]/route.ts
{
  const handler = {} as typeof import("../../app/api/tasks/[id]/route.js")
  handler satisfies RouteHandlerConfig<"/api/tasks/[id]">
}

// Validate ../../app/api/tasks/route.ts
{
  const handler = {} as typeof import("../../app/api/tasks/route.js")
  handler satisfies RouteHandlerConfig<"/api/tasks">
}





// Validate ../../app/layout.tsx
{
  const handler = {} as typeof import("../../app/layout.js")
  handler satisfies LayoutConfig<"/">
}
