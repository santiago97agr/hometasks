HomeTasks - Especificación Técnica para MVC

📱 Screenshots & Demo
┌─────────────────────────────────────────┐
│ 🏠 HomeTasks - Dashboard                │
├─────────────────────────────────────────┤
│ Esta Semana (3/5 completadas) █████░░░  │
│ ┌───────┬───────┬───────┬───────┐       │
│ │ Cocina│ Baño  │Comedor│ Patio │  →    │
│ │  ✓    │  ✓    │  ✓    │   ☐   │       │
│ └───────┴───────┴───────┴───────┘       │
│                                         │
│ Este Mes (1/3 completadas) ███░░░░░░░░  │
│ ┌───────┬───────┬───────┐               │
│ │Ventanas│ Horno │Alfombra│         →    │
│ │  ✓    │   ☐   │   ☐   │               │
│ └───────┴───────┴───────┘               │
└─────────────────────────────────────────┘

Stack Tecnológico

Framework: Next.js 15 (App Router)
Base de Datos: Turso (SQLite) con Drizzle ORM
Autenticación: NextAuth.js v5
UI: Tailwind CSS + shadcn/ui
Validación: Zod
Estado: TanStack Query (React Query)
Deploy: Vercel

Estructura de Datos
Modelo de Base de Datos (Drizzle Schema)
typescript// lib/db/schema.ts
import { sqliteTable, text, integer } from 'drizzle-orm/sqlite-core';

export const users = sqliteTable('users', {
  id: text('id').primaryKey(),
  email: text('email').unique().notNull(),
  name: text('name'),
  passwordHash: text('password_hash').notNull(),
  createdAt: integer('created_at', { mode: 'timestamp' }),
  updatedAt: integer('updated_at', { mode: 'timestamp' }),
});

export const areas = sqliteTable('areas', {
  id: text('id').primaryKey(),
  name: text('name').notNull(),
  color: text('color').default('#3B82F6'),
  userId: text('user_id').references(() => users.id),
  createdAt: integer('created_at', { mode: 'timestamp' }),
});

export const tasks = sqliteTable('tasks', {
  id: text('id').primaryKey(),
  name: text('name').notNull(),
  description: text('description'),
  frequency: text('frequency', { 
    enum: ['WEEKLY', 'MONTHLY', 'QUARTERLY', 'BIANNUAL', 'ANNUAL'] 
  }).notNull(),
  areaId: text('area_id').references(() => areas.id),
  userId: text('user_id').references(() => users.id).notNull(),
  startDate: integer('start_date', { mode: 'timestamp' }).notNull(),
  weekOfMonth: integer('week_of_month'), // 1-4 para mensual
  monthsArray: text('months_array'), // JSON ["1","4","7","10"] trimestral
  isActive: integer('is_active', { mode: 'boolean' }).default(true),
  createdAt: integer('created_at', { mode: 'timestamp' }),
  updatedAt: integer('updated_at', { mode: 'timestamp' }),
});

export const completions = sqliteTable('completions', {
  id: text('id').primaryKey(),
  taskId: text('task_id').references(() => tasks.id).notNull(),
  completedAt: integer('completed_at', { mode: 'timestamp' }),
  period: text('period').notNull(), // "2024-W03", "2024-01", "2024-Q1"
});
API Endpoints (Next.js API Routes)
Autenticación

POST /api/auth/signup - Registro de usuario
POST /api/auth/signin - Login
POST /api/auth/signout - Logout

Tareas

GET /api/tasks - Listar tareas del usuario
POST /api/tasks - Crear tarea
PUT /api/tasks/[id] - Editar tarea
DELETE /api/tasks/[id] - Eliminar tarea
POST /api/tasks/[id]/complete - Marcar como completada
DELETE /api/tasks/[id]/complete - Desmarcar completada

Áreas

GET /api/areas - Listar áreas del usuario
POST /api/areas - Crear área
PUT /api/areas/[id] - Editar área
DELETE /api/areas/[id] - Eliminar área

Dashboard

GET /api/dashboard - Datos del dashboard con tareas por periodicidad

Estructura de Carpetas
app/
├── (auth)/
│   ├── login/
│   │   └── page.tsx
│   └── register/
│       └── page.tsx
├── dashboard/
│   ├── page.tsx
│   ├── tasks/
│   │   ├── page.tsx
│   │   ├── new/
│   │   │   └── page.tsx
│   │   └── [id]/
│   │       └── edit/
│   │           └── page.tsx
│   └── areas/
│       ├── page.tsx
│       └── new/
│           └── page.tsx
├── api/
│   ├── auth/
│   │   └── [...nextauth]/
│   │       └── route.ts
│   ├── tasks/
│   │   ├── route.ts
│   │   └── [id]/
│   │       ├── route.ts
│   │       └── complete/
│   │           └── route.ts
│   ├── areas/
│   │   ├── route.ts
│   │   └── [id]/
│   │       └── route.ts
│   └── dashboard/
│       └── route.ts
├── layout.tsx
└── page.tsx

components/
├── ui/ (shadcn/ui components)
├── forms/
│   ├── task-form.tsx
│   ├── area-form.tsx
│   └── login-form.tsx
├── dashboard/
│   ├── task-slider.tsx
│   ├── progress-bar.tsx
│   └── period-section.tsx
└── layout/
    ├── header.tsx
    ├── sidebar.tsx
    └── footer.tsx

lib/
├── db/
│   ├── index.ts (conexión Turso)
│   └── schema.ts
├── auth.ts (NextAuth config)
├── validations.ts (Zod schemas)
├── utils.ts
└── constants.ts
Tipos TypeScript
typescript// types/index.ts

export type Frequency = 'WEEKLY' | 'MONTHLY' | 'QUARTERLY' | 'BIANNUAL' | 'ANNUAL';

export interface User {
  id: string;
  email: string;
  name?: string;
  createdAt: Date;
  updatedAt: Date;
}

export interface Area {
  id: string;
  name: string;
  color: string;
  userId: string;
  createdAt: Date;
}

export interface Task {
  id: string;
  name: string;
  description?: string;
  frequency: Frequency;
  areaId?: string;
  area?: Area;
  userId: string;
  startDate: Date;
  weekOfMonth?: number; // 1-4
  monthsArray?: string; // JSON array
  isActive: boolean;
  createdAt: Date;
  updatedAt: Date;
  completions: Completion[];
}

export interface Completion {
  id: string;
  taskId: string;
  completedAt: Date;
  period: string;
}

export interface DashboardData {
  weekly: TaskWithCompletion[];
  monthly: TaskWithCompletion[];
  quarterly: TaskWithCompletion[];
  biannual: TaskWithCompletion[];
  annual: TaskWithCompletion[];
}

export interface TaskWithCompletion extends Task {
  isCompleted: boolean;
  dueDate: Date;
  period: string;
}
Lógica de Negocio Clave
Cálculo de Fechas de Vencimiento
typescript// lib/date-utils.ts

export function calculateNextDueDate(task: Task, currentDate: Date = new Date()): Date {
  const { frequency, startDate, weekOfMonth, monthsArray } = task;
  
  switch (frequency) {
    case 'WEEKLY':
      // Cada 7 días desde startDate
      const weeksDiff = Math.floor((currentDate.getTime() - startDate.getTime()) / (7 * 24 * 60 * 60 * 1000));
      return new Date(startDate.getTime() + ((weeksDiff + 1) * 7 * 24 * 60 * 60 * 1000));
    
    case 'MONTHLY':
      // Semana específica del mes
      return calculateMonthlyDate(currentDate, weekOfMonth || 1);
    
    case 'QUARTERLY':
    case 'BIANNUAL':
    case 'ANNUAL':
      // Usar monthsArray para determinar meses específicos
      const months = JSON.parse(monthsArray || '[]');
      return calculatePeriodicDate(currentDate, months, frequency);
    
    default:
      return new Date();
  }
}

export function generatePeriodKey(date: Date, frequency: Frequency): string {
  const year = date.getFullYear();
  
  switch (frequency) {
    case 'WEEKLY':
      const week = getWeekNumber(date);
      return `${year}-W${week.toString().padStart(2, '0')}`;
    case 'MONTHLY':
      const month = date.getMonth() + 1;
      return `${year}-${month.toString().padStart(2, '0')}`;
    case 'QUARTERLY':
      const quarter = Math.floor(date.getMonth() / 3) + 1;
      return `${year}-Q${quarter}`;
    case 'BIANNUAL':
      const half = date.getMonth() < 6 ? 1 : 2;
      return `${year}-H${half}`;
    case 'ANNUAL':
      return `${year}`;
    default:
      return `${year}`;
  }
}
Validaciones Zod
typescript// lib/validations.ts

import { z } from 'zod';

export const createTaskSchema = z.object({
  name: z.string().min(1, 'Nombre requerido').max(100),
  description: z.string().optional(),
  frequency: z.enum(['WEEKLY', 'MONTHLY', 'QUARTERLY', 'BIANNUAL', 'ANNUAL']),
  areaId: z.string().optional(),
  startDate: z.date(),
  weekOfMonth: z.number().min(1).max(4).optional(),
  monthsArray: z.array(z.number().min(1).max(12)).optional(),
});

export const createAreaSchema = z.object({
  name: z.string().min(1, 'Nombre requerido').max(50),
  color: z.string().regex(/^#[0-9A-F]{6}$/i, 'Color hexadecimal válido'),
});

export const loginSchema = z.object({
  email: z.string().email('Email válido requerido'),
  password: z.string().min(6, 'Mínimo 6 caracteres'),
});

export const registerSchema = loginSchema.extend({
  name: z.string().min(2, 'Nombre requerido'),
  confirmPassword: z.string(),
}).refine((data) => data.password === data.confirmPassword, {
  message: 'Las contraseñas no coinciden',
  path: ['confirmPassword'],
});
Páginas Principales
Dashboard (/dashboard)

Mostrar sliders horizontales por periodicidad
Cada slider muestra tareas pendientes/completadas
Checkbox para marcar/desmarcar completadas
Contadores de progreso visuales
Filtros por área

Gestión de Tareas (/dashboard/tasks)

Lista completa de tareas
Botones para crear/editar/eliminar
Filtros por área y periodicidad
Búsqueda por nombre

Gestión de Áreas (/dashboard/areas)

Lista de áreas con colores
CRUD completo de áreas
Contador de tareas por área

Variables de Entorno
env# Turso Database
TURSO_DATABASE_URL="libsql://[db-name]-[org].turso.io"
TURSO_AUTH_TOKEN="your-auth-token"

# NextAuth
NEXTAUTH_URL="http://localhost:3000"
NEXTAUTH_SECRET="your-secret"

# Optional OAuth
GOOGLE_CLIENT_ID=""
GOOGLE_CLIENT_SECRET=""
Dependencias package.json
json{
  "dependencies": {
    "next": "^15.0.0",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "@libsql/client": "^0.4.0",
    "drizzle-orm": "^0.29.0",
    "drizzle-kit": "^0.20.0",
    "next-auth": "^5.0.0-beta.4",
    "bcryptjs": "^2.4.3",
    "@tanstack/react-query": "^5.0.0",
    "zod": "^3.22.0",
    "tailwindcss": "^3.4.0",
    "@radix-ui/react-slot": "^1.0.0",
    "lucide-react": "^0.300.0",
    "date-fns": "^3.0.0"
  },
  "devDependencies": {
    "typescript": "^5.0.0",
    "@types/node": "^20.0.0",
    "@types/react": "^18.0.0",
    "@types/bcryptjs": "^2.4.0"
  }
}